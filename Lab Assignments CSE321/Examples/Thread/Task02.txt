Easy_method------------------------



#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#include <stdint.h>

void *thread_function(void *arg);
int num[2] = {3, 5};
int result;  // Global variable to hold the result

int main() {
    pthread_t a_thread;
    pthread_create(&a_thread, NULL, thread_function, (void*)num);
    pthread_join(a_thread, NULL);
    printf("Inside main:\n");
    printf("Thread returned: %d\n", result);
    return 0;
}

void *thread_function(void *arg) {
    int* x = (int*)arg;
    result = x[0] + x[1];  // Store the result in the global variable
    printf("Sum is %d\n", result);
    pthread_exit(NULL);  // No need to return a value
}








New but a little tough!!


#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#include <stdint.h>

void *thread_function(void *arg);
int num[2] = {3, 5};

int main() {
  void* result;
  pthread_t a_thread;
  pthread_create(&a_thread, NULL, thread_function, (void*)num);
  pthread_join(a_thread, &result);
  printf("Inside main:\n");
  //printf("Thread returned: %s\n", (char*) result);                            
  printf("%ld\n", (intptr_t)result);
}

void *thread_function(void *arg) {
  int* x = arg;
  int sum = x[0] + x[1];
  printf("Sum is %d\n", sum);
  pthread_exit( (void*)(intptr_t)sum);
}








Alter Easy--------------------



#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#include <stdint.h>

void *thread_function(void *arg);
int num[2] = {3, 5};

int main() {
  void* result;
  pthread_t a_thread;
  pthread_create(&a_thread, NULL, thread_function, (void*)num);
  pthread_join(a_thread, &result);
  printf("Inside main:\n");
  //printf("Thread returned: %s\n", (char*) result);                            
  printf("%ld\n",result);
}

void *thread_function(void *arg) {
  int* x = arg;
  int sum = x[0] + x[1];
  printf("Sum is %d\n", sum);
  pthread_exit(sum);
}
